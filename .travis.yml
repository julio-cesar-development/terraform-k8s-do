language: shell # minimal

os:
  - linux

dist: bionic

branches:
  only:
    - master
    - development

services:
  - docker

env:
  # set environment
  - SHA=$(git rev-parse --short=7 HEAD) CLUSTER_NAME="k8s-cluster" AWS_BUCKET_NAME="blackdevs-aws" AWS_DEFAULT_REGION="sa-east-1"

script:
  - |
    # terraform linter
    docker container run --name tflint --rm -v "$PWD:/data" -w /data --entrypoint "" -it wata727/tflint:0.14.0 tflint ./

    # terraform security
    docker container run --name tfsec --rm -v "$PWD:/workdir" -w /workdir -it wesleydeanflexion/tfsec:latest .

    # shell linter
    docker container run --name shellcheck --rm -v "$PWD:/mnt" -w /mnt -it koalaman/shellcheck-alpine:stable shellcheck deploy.sh

after_success:
  - |
    if [ $TRAVIS_PULL_REQUEST != "false" ]; then
      docker container run -i --rm \
        --env GITHUB_TOKEN=$GITHUB_TOKEN \
        --env GITHUB_OWNER=julio-cesar-development \
        --env GITHUB_REPO=terraform-k8s-do \
        --env GITHUB_COMMENT_TYPE=pr \
        --env GITHUB_PR_ISSUE_NUMBER=$TRAVIS_PULL_REQUEST \
        --env GITHUB_COMMENT_FORMAT="<b>Comment</b><br/>{{.}}" \
        --env GITHUB_COMMENT="build of commit $SHA was successful, LGTM" \
        cloudposse/github-commenter:latest
    fi

after_failure:
  - |
    if [ $TRAVIS_PULL_REQUEST != "false" ]; then
      docker container run -i --rm \
        --env GITHUB_TOKEN=$GITHUB_TOKEN \
        --env GITHUB_OWNER=julio-cesar-development \
        --env GITHUB_REPO=terraform-k8s-do \
        --env GITHUB_COMMENT_TYPE=pr \
        --env GITHUB_PR_ISSUE_NUMBER=$TRAVIS_PULL_REQUEST \
        --env GITHUB_COMMENT_FORMAT="<b>Comment</b><br/>{{.}}" \
        --env GITHUB_COMMENT="build of commit $SHA was not successful" \
        cloudposse/github-commenter:latest
    fi

deploy:
  on:
    branch: master
  provider: script
  script: bash ./deploy.sh
  skip_cleanup: true

after_deploy:
  - |
    docker container run \
      --name awscli \
      --rm -it \
      -v "$PWD:/data" \
      -w /data \
      --env AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
      --env AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
      --env AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION" \
      --env CLUSTER_NAME="$CLUSTER_NAME" \
      --entrypoint "" \
      amazon/aws-cli:2.0.20 sh -c \
      "aws s3 cp ./plan.tfplan s3://${AWS_BUCKET_NAME}/terraform/k8s-do/plan.tfplan && \
      aws s3 cp ./plan.txt s3://${AWS_BUCKET_NAME}/terraform/k8s-do/plan.txt && \
      aws s3 cp ./apply.txt s3://${AWS_BUCKET_NAME}/terraform/k8s-do/apply.txt && \
      aws s3 cp ./${CLUSTER_NAME}-kubeconfig.yaml s3://${AWS_BUCKET_NAME}/terraform/k8s-do/${CLUSTER_NAME}-kubeconfig.yaml"
